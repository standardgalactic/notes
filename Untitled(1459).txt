
￼￼

Table of binary truth functions In two-valued logic, there are sixteen possible truth functions, also called Boolean functions, of two inputs P and Q. Any of these functions corresponds to a truth table of a certain logical connective in classical logic, including several degenerate cases such as a function not depending on one or both of its arguments. Truth and falsehood are denoted as 1 and 0, respectively, in the following truth tables for sake of brevity. Contradiction/False Notation	Equivalent formulas	Truth table	Venn diagram ⊥\bot "bottom"	P ∧ ¬P Opq	 	Q 0	1 P	0 	 0 	 0 1 	 0 	 0 Venn0000.svg Tautology/True Notation	Equivalent formulas	Truth table	Venn diagram ⊤\top "top"	P ∨ ¬P Vpq	 	Q 0	1 P	0 	 1 	 1 1 	 1 	 1 Venn1111.svg Proposition P Notation	Equivalent formulas	Truth table	Venn diagram P	p Ipq	 	Q 0	1 P	0 	 0 	 0 1 	 1 	 1 Venn0101.svg Negation of P Notation	Equivalent formulas	Truth table	Venn diagram ¬P ~P	Np Fpq	 	Q 0	1 P	0 	 1 	 1 1 	 0 	 0 Venn1010.svg Proposition Q Notation	Equivalent formulas	Truth table	Venn diagram Q	q Hpq	 	Q 0	1 P	0 	 0 	 1 1 	 0 	 1 Venn0011.svg Negation of Q Notation	Equivalent formulas	Truth table	Venn diagram ¬Q ~Q	Nq Gpq	 	Q 0	1 P	0 	 1 	 0 1 	 1 	 0 Venn1100.svg Conjunction Notation	Equivalent formulas	Truth table	Venn diagram P ∧ Q P & Q P · Q P AND Q	P ↛¬Q ¬P ↚ Q ¬P ↓ ¬Q Kpq	 	Q 0	1 P	0 	 0 	 0 1 	 0 	 1 Venn0001.svg Non-conjunction/Alternative denial Notation	Equivalent formulas	Truth table	Venn diagram P ↑ Q P | Q P NAND Q	P → ¬Q ¬P ← Q ¬P ∨ ¬Q Dpq	 	Q 0	1 P	0 	 1 	 1 1 	 1 	 0 Venn1110.svg Disjunction Notation	Equivalent formulas	Truth table	Venn diagram P ∨ Q P OR Q	P ← ¬Q ¬P → Q ¬P ↑ ¬Q ¬(¬P ∧ ¬Q) Apq	 	Q 0	1 P	0 	 0 	 1 1 	 1 	 1 Venn0111.svg Non-disjunction/Joint denial Notation	Equivalent formulas	Truth table	Venn diagram P ↓ Q P NOR Q	P ↚ ¬Q ¬P ↛ Q ¬P ∧ ¬Q Xpq	 	Q 0	1 P	0 	 1 	 0 1 	 0 	 0 Venn1000.svg Material nonimplication Notation	Equivalent formulas	Truth table	Venn diagram P ↛ Q P ⊅ \not \supset Q P > > Q P NIMPLY Q	P ∧ ¬Q ¬P ↓ Q ¬P ↚ ¬Q Lpq	 	Q 0	1 P	0 	 0 	 0 1 	 1 	 0 Venn0100.svg Material implication Notation	Equivalent formulas	Truth table	Venn diagram P → Q P ⊃ Q P ≤\leq Q P IMPLY Q	P ↑ ¬Q ¬P ∨ Q ¬P ← ¬Q Cpq	 	Q 0	1 P	0 	 1 	 1 1 	 0 	 1 Venn1011.svg Converse nonimplication Notation	Equivalent formulas	Truth table	Venn diagram P ↚ Q P ⊄ \not \subset Q P < < Q	P ↓ ¬Q ¬P ∧ Q ¬P ↛ ¬Q Mpq	 	Q 0	1 P	0 	 0 	 1 1 	 0 	 0 Venn0010.svg Converse implication Notation	Equivalent formulas	Truth table	Venn diagram P ← Q P ⊂ Q P ≥\geq Q	P ∨ ¬Q ¬P ↑ Q ¬P → ¬Q Bpq	 	Q 0	1 P	0 	 1 	 0 1 	 1 	 1 Venn1101.svg Non-equivalence/Exclusive disjunction Notation	Equivalent formulas	Truth table	Venn diagram P ↮ Q P ≢ Q P ⨁ Q P XOR Q	P ↔\leftrightarrow ¬Q ¬P ↔\leftrightarrow Q ¬P ↮ ¬Q Jpq	 	Q 0	1 P	0 	 0 	 1 1 	 1 	 0 Venn0110.svg Equivalence/Biconditional Notation	Equivalent formulas	Truth table	Venn diagram P ↔\leftrightarrow Q P ≡ Q P XNOR Q P IFF Q	P ↮ ¬Q ¬P ↮ Q ¬P ↔\leftrightarrow ¬Q Epq	 	Q 0	1 P	0 	 1 	 0 1 	 0 	 1 Venn1001.svg Functional completeness Main article: Functional completeness Because a function may be expressed as a composition, a truth-functional logical calculus does not need to have dedicated symbols for all of the above-mentioned functions to be functionally complete. This is expressed in a propositional calculus as logical equivalence of certain compound statements. For example, classical logic has ¬P ∨ Q equivalent to P → Q. The conditional operator "→" is therefore not necessary for a classical-based logical system if "¬" (not) and "∨" (or) are already in use. A minimal set of operators that can express every statement expressible in the propositional calculus is called a minimal functionally complete set. A minimally complete set of operators is achieved by NAND alone {↑} and NOR alone {↓}. The following are the minimal functionally complete sets of operators whose arities do not exceed 2:[5] One element {↑}, {↓}. Two elements { ∨ , ¬ } {\displaystyle \{\vee ,\neg \}}, { ∧ , ¬ } {\displaystyle \{\wedge ,\neg \}}, { → , ¬ } {\displaystyle \{\to ,\neg \}}, { ← , ¬ } {\displaystyle \{\gets ,\neg \}}, { → , ⊥ } {\displaystyle \{\to ,\bot \}}, { ← , ⊥ } {\displaystyle \{\gets ,\bot \}}, { → , ↮ } {\displaystyle \{\to ,\nleftrightarrow \}}, { ← , ↮ } {\displaystyle \{\gets ,\nleftrightarrow \}}, { → , ↛ } {\displaystyle \{\to ,\nrightarrow \}}, { → , ↚ } {\displaystyle \{\to ,\nleftarrow \}}, { ← , ↛ } {\displaystyle \{\gets ,\nrightarrow \}}, { ← , ↚ } {\displaystyle \{\gets ,\nleftarrow \}}, { ↛ , ¬ } {\displaystyle \{\nrightarrow ,\neg \}}, { ↚ , ¬ } {\displaystyle \{\nleftarrow ,\neg \}}, { ↛ , ⊤ } {\displaystyle \{\nrightarrow ,\top \}}, { ↚ , ⊤ } {\displaystyle \{\nleftarrow ,\top \}}, { ↛ , ↔ } {\displaystyle \{\nrightarrow ,\leftrightarrow \}}, { ↚ , ↔ } {\displaystyle \{\nleftarrow ,\leftrightarrow \}}. Three elements { ∨ , ↔ , ⊥ } {\displaystyle \{\lor ,\leftrightarrow ,\bot \}}, { ∨ , ↔ , ↮ } {\displaystyle \{\lor ,\leftrightarrow ,\nleftrightarrow \}}, { ∨ , ↮ , ⊤ } {\displaystyle \{\lor ,\nleftrightarrow ,\top \}}, { ∧ , ↔ , ⊥ } {\displaystyle \{\land ,\leftrightarrow ,\bot \}}, { ∧ , ↔ , ↮ } {\displaystyle \{\land ,\leftrightarrow ,\nleftrightarrow \}}, { ∧ , ↮ , ⊤ } {\displaystyle \{\land ,\nleftrightarrow ,\top \}}. Algebraic properties Some truth functions possess properties which may be expressed in the theorems containing the corresponding connective. Some of those properties that a binary truth function (or a corresponding logical connective) may have are: associativity: Within an expression containing two or more of the same associative connectives in a row, the order of the operations does not matter as long as the sequence of the operands is not changed. commutativity: The operands of the connective may be swapped without affecting the truth-value of the expression. distributivity: A connective denoted by · distributes over another connective denoted by +, if a · (b + c) = (a · b) + (a · c) for all operands a, b, c. idempotence: Whenever the operands of the operation are the same, the connective gives the operand as the result. In other words, the operation is both truth-preserving and falsehood-preserving (see below). absorption: A pair of connectives ∧ , ∨{\displaystyle \land ,\lor } satisfies the absorption law if � ∧ ( � ∨ � ) = � ∨ ( � ∧ � ) = � {\displaystyle a\land (a\lor b)=a\lor (a\land b)=a} for all operands a, b. A set of truth functions is functionally complete if and only if for each of the following five properties it contains at least one member lacking it: monotonic: If f(a1, ..., an) ≤ f(b1, ..., bn) for all a1, ..., an, b1, ..., bn ∈ {0,1} such that a1 ≤ b1, a2 ≤ b2, ..., an ≤ bn. E.g., ∨ , ∧ , ⊤ , ⊥{\displaystyle \vee ,\wedge ,\top ,\bot }. affine: For each variable, changing its value either always or never changes the truth-value of the operation, for all fixed values of all other variables. E.g., ¬ , ↔{\displaystyle \neg ,\leftrightarrow }, ↮ , ⊤ , ⊥{\displaystyle \not \leftrightarrow ,\top ,\bot }. self dual: To read the truth-value assignments for the operation from top to bottom on its truth table is the same as taking the complement of reading it from bottom to top; in other words, f(¬a1, ..., ¬an) = ¬f(a1, ..., an). E.g., ¬\neg . truth-preserving: The interpretation under which all variables are assigned a truth value of 'true' produces a truth value of 'true' as a result of these operations. E.g., ∨ , ∧ , ⊤ , → , ↔ , ⊂{\displaystyle \vee ,\wedge ,\top ,\rightarrow ,\leftrightarrow ,\subset }. (see validity) falsehood-preserving: The interpretation under which all variables are assigned a truth value of 'false' produces a truth value of 'false' as a result of these operations. E.g., ∨ , ∧ , ↮ , ⊥ , ⊄ , ⊅ {\displaystyle \vee ,\wedge ,\nleftrightarrow ,\bot ,\not \subset ,\not \supset }. (see validity) Arity See also: arity A concrete function may be also referred to as an operator. In two-valued logic there are 2 nullary operators (constants), 4 unary operators, 16 binary operators, 256 ternary operators, and 2 2 � 2^{2^{n}} n-ary operators. In three-valued logic there are 3 nullary operators (constants), 27 unary operators, 19683 binary operators, 7625597484987 ternary operators, and 3 3 � 3^{{3^{n}}} n-ary operators. In k-valued logic, there are k nullary operators, � � k^{k} unary operators, � � 2 k^{{k^{2}}} binary operators, � � 3 k^{{k^{3}}} ternary operators, and � � � k^{{k^{n}}} n-ary operators. An n-ary operator in k-valued logic is a function from � � � → � � {\mathbb {Z}}_{k}^{n}\to {\mathbb {Z}}_{k}. Therefore, the number of such operators is | � � | | � � � | = � � � |{\mathbb {Z}}_{k}|^{{|{\mathbb {Z}}_{k}^{n}|}}=k^{{k^{n}}}, which is how the above numbers were derived. However, some of the operators of a particular arity are actually degenerate forms that perform a lower-arity operation on some of the inputs and ignore the rest of the inputs. Out of the 256 ternary boolean operators cited above, ( 3 2 ) ⋅ 16 − ( 3 1 ) ⋅ 4 + ( 3 0 ) ⋅ 2 {\binom {3}{2}}\cdot 16-{\binom {3}{1}}\cdot 4+{\binom {3}{0}}\cdot 2 of them are such degenerate forms of binary or lower-arity operators, using the inclusion–exclusion principle. The ternary operator � ( � , � , � ) = ¬ � f(x,y,z)=\lnot x is one such operator which is actually a unary operator applied to one input, and ignoring the other two inputs. "Not" is a unary operator, it takes a single term (¬P). The rest are binary operators, taking two terms to make a compound statement (P ∧ Q, P ∨ Q, P → Q, P ↔ Q). The set of logical operators Ω may be partitioned into disjoint subsets as follows: Ω = Ω 0 ∪ Ω 1 ∪ … ∪ Ω � ∪ … ∪ Ω � . \Omega =\Omega _{0}\cup \Omega _{1}\cup \ldots \cup \Omega _{j}\cup \ldots \cup \Omega _{m}\,. In this partition, Ω � \Omega _{j} is the set of operator symbols of arity j. In the more familiar propositional calculi, Ω\Omega is typically partitioned as follows: nullary operators: Ω 0 = { ⊥ , ⊤ } {\displaystyle \Omega _{0}=\{\bot ,\top \}} unary operators: Ω 1 = { ¬ } {\displaystyle \Omega _{1}=\{\lnot \}} binary operators: Ω 2 ⊃ { ∧ , ∨ , → , ↔ } {\displaystyle \Omega _{2}\supset \{\land ,\lor ,\rightarrow ,\leftrightarrow \}} Principle of compositionality Instead of using truth tables, logical connective symbols can be interpreted by means of an interpretation function and a functionally complete set of truth-functions (Gamut 1991), as detailed by the principle of compositionality of meaning. Let I be an interpretation function, let Φ, Ψ be any two sentences and let the truth function fnand be defined as: fnand(T,T) = F; fnand(T,F) = fnand(F,T) = fnand(F,F) = T Then, for convenience, fnot, for fand and so on are defined by means of fnand: fnot(x) = fnand(x,x) for(x,y) = fnand(fnot(x), fnot(y)) fand(x,y) = fnot(fnand(x,y)) or, alternatively fnot, for fand and so on are defined directly: fnot(T) = F; fnot(F) = T; for(T,T) = for(T,F) = for(F,T) = T; for(F,F) = F fand(T,T) = T; fand(T,F) = fand(F,T) = fand(F,F) = F Then I(~) = I( ¬\neg ) = fnot I(&) = I( ∧\wedge ) = fand I(v) = I( ∨\lor ) = for I(~Φ) = I( ¬\neg Φ) = I( ¬\neg )(I(Φ)) = fnot(I(Φ)) I(Φ ∧\wedge Ψ) = I( ∧\wedge )(I(Φ), I(Ψ)) = fand(I(Φ), I(Ψ)) etc. Thus if S is a sentence that is a string of symbols consisting of logical symbols v1...vn representing logical connectives, and non-logical symbols c1...cn, then if and only if I(v1)...I(vn) have been provided interpreting v1 to vn by means of fnand (or any other set of functional complete truth-functions) then the truth-value of � ( � ) {\displaystyle I(s)} is determined entirely by the truth-values of c1...cn, i.e. of I(c1)...I(cn). In other words, as expected and required, S is true or false only under an interpretation of all its non-logical symbols. Computer science Logical operators are implemented as logic gates in digital circuits. Practically all digital circuits (the major exception is DRAM) are built up from NAND, NOR, NOT, and transmission gates. NAND and NOR gates with 3 or more inputs rather than the usual 2 inputs are fairly common, although they are logically equivalent to a cascade of 2-input gates. All other operators are implemented by breaking them down into a logically equivalent combination of 2 or more of the above logic gates. The "logical equivalence" of "NAND alone", "NOR alone", and "NOT and AND" is similar to Turing equivalence. The fact that all truth functions can be expressed with NOR alone is demonstrated by the Apollo guidance computer.

ChatGPT

It seems like the provided text is a detailed enumeration of different kinds of binary truth functions or Boolean functions in classical logic. Here, P and Q represent two inputs for a function, and each of these functions corresponds to a certain logical connective. For example, conjunction (P ∧ Q), disjunction (P ∨ Q), and negation (¬P, ¬Q) are some common logical connectives.

The truth tables represent the output of each function depending on the inputs P and Q. For instance, for a conjunction function (P ∧ Q), the output is true (1) only if both P and Q are true. In every other case (P is true and Q is false, P is false and Q is true, or both are false), the output is false (0).

The text also introduces the concept of functional completeness, which means a set of logical operations is functionally complete if any Boolean function can be expressed using only operations from this set. For instance, the set {NAND} or {NOR} alone is functionally complete.

Additionally, the text discusses some algebraic properties that binary truth functions can have, like associativity, commutativity, distributivity, and absorption. These properties are often leveraged in Boolean algebra to simplify expressions and digital logic circuit design.

Then, there's a mention of arity which is a term in logic and mathematics that refers to the number of arguments or operands that a function or operation takes. For instance, in binary logic, there are 16 binary operators, meaning operators that take two inputs.

The text seems to cut off when talking about the number of operators in multi-valued logic or non-binary logic. These would include ternary logic (3 values) or any arbitrary n-valued logic.

Do note that the text seems to be presented in a format as if copied from a source that uses formatting unavailable here, like tables and diagrams, which makes it a bit difficult to follow without the actual visual aids.

￼￼

	[5]		operator	Operation name 0	(F F F F)(p, q)	⊥	false, Opq	Contradiction 1	(F F F T)(p, q)	NOR	p ↓ q, Xpq	Logical NOR 2	(F F T F)(p, q)	↚	p ↚ q, Mpq	Converse nonimplication 3	(F F T T)(p, q)	¬p, ~p	¬p, Np, Fpq	Negation 4	(F T F F)(p, q)	↛	p ↛ q, Lpq	Material nonimplication 5	(F T F T)(p, q)	¬q, ~q	¬q, Nq, Gpq	Negation 6	(F T T F)(p, q)	XOR	p ⊕ q, Jpq	Exclusive disjunction 7	(F T T T)(p, q)	NAND	p ↑ q, Dpq	Logical NAND 8	(T F F F)(p, q)	AND	p ∧ q, Kpq	Logical conjunction 9	(T F F T)(p, q)	XNOR	p If and only if q, Epq	Logical biconditional 10	(T F T F)(p, q)	q	q, Hpq	Projection function 11	(T F T T)(p, q)	p → q	if p then q, Cpq	Material implication 12	(T T F F)(p, q)	p	p, Ipq	Projection function 13	(T T F T)(p, q)	p ← q	p if q, Bpq	Converse implication 14	(T T T F)(p, q)	OR	p ∨ q, Apq	Logical disjunction 15	(T T T T)(p, q)	⊤	true, Vpq	Tautology

ChatGPT

This table represents truth tables for various binary logic operations. The operations are performed on two boolean values, p and q, which can either be true (T) or false (F). Each operation is characterized by how it maps these inputs to its output.

Let's go through the table to see how it works:

The columns with T's and F's represent the possible outputs of the operation for all combinations of inputs (p, q). For example, in the case of (F F F F), this means that for any value of p and q, the output is always False (F), which corresponds to the logical contradiction (⊥).

The 'operator' column specifies the symbol used for the operation in logical notation. For instance, AND is denoted as ∧, OR as ∨, etc.

'Operation name' indicates the common name used for these operations in the field of logic.

The notation in brackets, like (p, q), shows the typical argument structure of the operation.

The column with multiple entries, for instance '¬p, Np, Fpq' for 'Negation', shows different ways to denote the operation. Some operations like 'Negation' and 'Converse nonimplication' have multiple notations.

Here's a short description of a few operations:

Contradiction (⊥): An operation that always returns false regardless of the input values of p and q.

Logical NOR: It's true only when both p and q are false. In other words, it's the negation of the logical OR operation.

Negation (¬p or ¬q): This operation only considers one input and flips it, so if p (or q) is true, it will return false, and vice versa.

Exclusive disjunction (XOR, ⊕): This operation returns true only when exactly one of p or q is true (but not both).

Logical conjunction (AND, ∧): This operation returns true only if both p and q are true.

Logical biconditional (XNOR, If and only if): This operation returns true if both p and q are the same (either both true or both false).

Material implication (→): It's often read as 'if p then q'. It's false only when p is true and q is false, otherwise it's true.

Logical disjunction (OR, ∨): This operation returns true if at least one of p or q is true.

Tautology (⊤): An operation that always returns true regardless of the input values of p and q.

These are fundamental operations in logic and are used extensively in computer science, mathematics, philosophy, and many other disciplines.

￼￼

p	q		 F0 	 NOR1 	 ↚2 	 ¬p3 	 NIMPLY4 	 ¬q5 	 XOR6 	 NAND7 		 AND8 	 XNOR9 	q10	IMPLY11	p12	←13	OR14	T15 T	T		F	F	F	F	F	F	F	F		T	T	T	T	T	T	T	T T	F		F	F	F	F	T	T	T	T		F	F	F	F	T	T	T	T F	T		F	F	T	T	F	F	T	T		F	F	T	T	F	F	T	T F	F		F	T	F	T	F	T	F	T		F	T	F	T	F	T	F	T Com		✓	✓					✓	✓		✓	✓					✓	✓ Assoc		✓						✓			✓	✓	✓		✓		✓	✓ Adj		F0	NOR1	↛4	¬q5	NIMPLY2	¬p3	XOR6	NAND7		AND8	XNOR9	p12	IMPLY13	q10	→11	OR14	T15 Neg		T15	OR14	←13	p12	IMPLY11	q10	XNOR9	AND8		NAND7	XOR6	¬q5	NIMPLY4	¬p3	↚2	NOR1	F0 Dual		T15	NAND7	→11	¬p3	←13	¬q5	XNOR9	NOR1		OR14	XOR6	q10	↚2	p12	↛4	AND8	F0 L id				F				F			T	T	T,F	T			F	 R id						F		F			T	T			T,F	T	F	 

ChatGPT

This table describes the properties of binary logical operators and their relationships with each other. Here's what each part means:

The first part is a truth table, showing the outputs of each operator for each combination of p and q.

'Com' refers to 'commutativity', which indicates if the order of the operands changes the result. If it does, the operator is not commutative (✓).

'Assoc' refers to 'associativity', which indicates whether the operator groups operands in a way that changing the grouping doesn't change the result.

'Adj' refers to 'adjacency', which indicates the order of the operators in terms of adjacency or nearness.

'Neg' refers to 'negation', which is the operation that produces the opposite of a given logical value.

'Dual' refers to 'duality', a principle stating that every logical operation is dual to another operation.

'L id' and 'R id' refer to the left and right identity of each operator, respectively. The identity element is a value that leaves the other operand unchanged when the operator is applied to the two. For instance, in the case of the AND operator, the right and left identity is T (True), as anything AND True is equal to the original value.

The notation might be complex for people unfamiliar with logic, but these tables essentially provide a comprehensive overview of how these basic logic operators behave and relate to each other. They are the building blocks for more complex logical expressions and operations, and have wide applications in fields like computer science, mathematics, electronics, and more.

￼￼

I want a chart with the names and symbols They should have been and ∧, or ∨, xor ↮, if then (implication) →, converse implication ←, equivalence ↔, nand ↑, nor ↓, but not (nimply, nonimplication)↛, converse nonimplication ↚, top (tautology) ⊤, bottom (contradiction) ⊥, A, B, not A, ¬A, and not B, ¬B.

ChatGPT

Sure, here is a summary chart for the logic operations and their symbols:

